generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String       @id @default(cuid())
  name         String
  email        String       @unique
  title        String?
  department   String?
  bio          String?
  phone        String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  clerkId      String       @unique
  role         UserRole     @default(USER)

  // Relations
  applications Application[]
  interviews   Interview[]
  positions    Position[]
}

enum UserRole {
  ADMIN
  RECRUITER
  USER
}

model Position {
  id           String        @id @default(cuid())
  title        String
  department   String
  location     String
  type         String
  description  String
  requirements String
  status       PositionStatus @default(OPEN)
  postedDate   DateTime      @default(now())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userId       String
  createdBy    User          @relation(fields: [userId], references: [id])

  // Relations
  applications Application[]
}

enum PositionStatus {
  OPEN
  CLOSED
  DRAFT
  ARCHIVED
}

model Candidate {
  id           String        @id @default(cuid())
  name         String
  email        String        @unique
  phone        String?
  resumeUrl    String?
  skills       String[]
  experience   String?
  status       CandidateStatus @default(ACTIVE)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // Relations
  applications Application[]
  interviews   Interview[]
}

enum CandidateStatus {
  ACTIVE
  ARCHIVED
  BLACKLISTED
}

model Application {
  id           String      @id @default(cuid())
  candidateId  String
  userId       String?
  positionId   String
  resumeUrl    String
  coverLetter  String?
  matchScore   Int        @default(0)
  status       ApplicationStatus @default(PENDING)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Candidate Data (denormalized for efficiency)
  name        String
  email       String
  phone       String?
  experience  String?
  skills      String[]

  // Relations
  candidate   Candidate   @relation(fields: [candidateId], references: [id])
  position    Position    @relation(fields: [positionId], references: [id])
  user        User?       @relation(fields: [userId], references: [id])
  interviews  Interview[]
}

enum ApplicationStatus {
  PENDING
  REVIEWING
  SHORTLISTED
  REJECTED
  HIRED
  WITHDRAWN
}

model Interview {
  id            String      @id @default(cuid())
  scheduledFor  DateTime
  duration      Int         @default(60)
  meetingUrl    String?
  notes         String?
  status        InterviewStatus @default(SCHEDULED)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  applicationId String
  candidateId   String
  userId        String

  // Relations
  application   Application @relation(fields: [applicationId], references: [id])
  candidate     Candidate   @relation(fields: [candidateId], references: [id])
  scheduler     User        @relation(fields: [userId], references: [id])
}

enum InterviewStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  NO_SHOW
  RESCHEDULED
}

